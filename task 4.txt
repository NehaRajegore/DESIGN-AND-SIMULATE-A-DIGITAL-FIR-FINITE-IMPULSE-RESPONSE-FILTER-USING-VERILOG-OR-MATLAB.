# DESIGN-AND-SIMULATE-A-DIGITAL-FIR-FINITE-IMPULSE-RESPONSE-FILTER-USING-VERILOG-OR-MATLAB.
# COMPANY: CODTECH IT SOLUTIONS
# NAME: NEHA NARAYAN RAJEGORE 
# INTERN ID:CT08JTK
# DOMAIN:VLSI (Very Large Scale Integration) 
# BATCH DURATION:JANUARY30TH,2025 TO MARCH 1ST,2025 
# MANTOR NAME:NEELA SANTHOSH KUMAR 
# DESCRIPTION OF TASK:FIR Filter Verilog Code
module FIR_Filter (
    input clk,
    input reset,
    input signed [15:0] x_in,    // Input signal
    output reg signed [15:0] y_out // Filtered output
);
    
    // FIR Filter Coefficients (from MATLAB fir1)
    parameter signed [15:0] coeffs [0:7] = {16'd50, 16'd100, 16'd150, 16'd200, 
                                            16'd200, 16'd150, 16'd100, 16'd50};

    reg signed [15:0] shift_reg [0:7]; // Shift register for input samples
    integer i;
    
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset shift registers
            for (i = 0; i < 8; i = i + 1) 
                shift_reg[i] <= 16'd0;
            y_out <= 16'd0;
        end else begin
            // Shift input samples
            for (i = 7; i > 0; i = i - 1) 
                shift_reg[i] <= shift_reg[i-1];
            shift_reg[0] <= x_in;

            // Compute FIR filter output
            y_out = 16'd0;
            for (i = 0; i < 8; i = i + 1) 
                y_out = y_out + (shift_reg[i] * coeffs[i]) >> 8; // Scaling
        end
    end
endmodule
# Testbench for Simulation
`timescale 1ns / 1ps
module FIR_Test;
    reg clk, reset;
    reg signed [15:0] x_in;
    wire signed [15:0] y_out;

    // Instantiate FIR Filter
    FIR_Filter uut (.clk(clk), .reset(reset), .x_in(x_in), .y_out(y_out));

    // Clock generation
    always #5 clk = ~clk; // 10ns period (100 MHz clock)

    initial begin
        clk = 0; reset = 1; x_in = 0;
        #10 reset = 0; 

        // Apply input samples (simulate a step input)
        #10 x_in = 16'd500;
        #10 x_in = 16'd400;
        #10 x_in = 16'd300;
        #10 x_in = 16'd200;
        #10 x_in = 16'd100;
        #10 x_in = 16'd0;
        #10 x_in = -16'd100;
        #10 x_in = -16'd200;
        #10 x_in = -16'd300;
        #10 x_in = -16'd400;
        #10 x_in = -16'd500;
        
        #100 $stop; // End simulation
    end
endmodule
# Simulation Result
Expected Waveform Output (Using ModelSim/Vivado/QuestaSim)
Step Response: The FIR filter smoothly responds to input changes.
Latency: Due to the shift register, the output appears after a few clock cycles.
Attenuation: The filter reduces unwanted frequencies.
# Waveform Snapshot:

x_in: Input values applied to the filter.
y_out: Filtered output values, showing smoothed transitions.
4. Performance Analysis
Key Performance Metrics
Parameter	Value
Filter Order	8
Cutoff Frequency	100 Hz
Sampling Rate	1000 Hz
Clock Frequency	100 MHz (for FPGA simulation)
Latency	8 clock cycles
Power Usage	Depends on FPGA implementation
Resource Usage	8 Multipliers + 8 Adders

